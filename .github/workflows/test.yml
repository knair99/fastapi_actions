name: CI Tests

permissions:
  pull-requests: write
  contents: read  # For reading repository contents

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: docker build --cache-from=type=gha --cache-to=type=gha,mode=max -t fastapi-app .

      - name: Run Unit Tests inside Docker with coverage
        run: |
          docker run --rm \
            -e PYTHONPATH=/app \
            -v ${{ github.workspace }}/coverage:/app/coverage \
            fastapi-app poetry run pytest --cov=app --cov-report=xml:/app/coverage/coverage.xml --cov-report=html:/app/coverage/html tests/test_unit.py

      - name: Upload Coverage Report as an Artifact
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage-report
          path: coverage/

  acceptance-tests:
    name: Run Acceptance Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: docker build --cache-from=type=gha --cache-to=type=gha,mode=max -t fastapi-app .

      - name: Run Docker container
        run: docker run -d -p 8000:8000 --name fastapi-container fastapi-app

      - name: Wait for container to be ready
        run: |
          until curl -s http://localhost:8000/docs; do
            echo "Waiting for FastAPI to start..."
            sleep 5
          done

      - name: Run Acceptance Tests with Coverage
        run: |
          docker run --rm --network host -e PYTHONPATH=/app -v ${{ github.workspace }}/coverage:/app/coverage fastapi-app poetry run pytest --cov=app --cov-report=xml:/app/coverage/coverage-acceptance.xml --cov-report=html:/app/coverage/html tests/test_acceptance.py

      - name: Upload Acceptance Test Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: acceptance-test-coverage-report
          path: coverage/

  flake8-lint:
    name: Run Flake8 Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'  # Use your required Python version

      - name: Install Flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8  # Install Flake8

      - name: Filter Python Files
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            python:
              - '*.py'          # For top-level Python files
              - '**/*.py'       # For Python files in any subdirectory

      - name: Run Flake8 on Changed Python Files
        if: steps.filter.outputs.python == 'true'
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }} --depth=1
          git diff origin/${{ github.event.pull_request.base.ref }} -- '*.py' > diff.txt
          flake8 --diff > flake8-report.txt
        continue-on-error: true  # Continue workflow even if there are Flake8 issues

      - name: Check if Flake8 Report is Created
        if: steps.filter.outputs.python == 'true'
        run: |
          if [ -s flake8-report.txt ]; then
            echo "Flake8 report exists"
          else
            echo "No changes detected by Flake8, generating empty report" > flake8-report.txt
          fi

      - name: Create PR comment with Flake8 report
        if: always() && github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: flake8-report.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
