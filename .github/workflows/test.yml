name: CI Tests

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-docker-image:
    name: Build and Cache Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image and cache
        run: |
          docker build -t fastapi-app \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --cache-from=type=local,src=/tmp/.buildx-cache \
          --cache-to=type=local,dest=/tmp/.buildx-cache \
          .

      - name: Upload Docker cache as an artifact (optional for cross-job sharing)
        uses: actions/upload-artifact@v4
        with:
          name: docker-cache
          path: /tmp/.buildx-cache/

  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: build-docker-image  # Make sure the unit tests wait for Docker build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Restore Docker cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image (with cache)
        run: |
          docker build -t fastapi-app \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --cache-from=type=local,src=/tmp/.buildx-cache \
          --cache-to=type=local,dest=/tmp/.buildx-cache \
          .

      - name: Run Unit Tests inside Docker with coverage
        run: |
          docker run --rm \
            -e PYTHONPATH=/app \
            -v ${{ github.workspace }}/coverage:/app/coverage \
            fastapi-app poetry run pytest --cov=app --cov-report=xml:/app/coverage/coverage-unit.xml --cov-report=html:/app/coverage/html tests/test_unit.py

      - name: Upload Unit Test Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage-report
          path: coverage/

  acceptance-tests:
    name: Run Acceptance Tests
    runs-on: ubuntu-latest
    needs: build-docker-image  # This ensures it runs after Docker image build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Restore Docker cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image (with cache)
        run: |
          docker build -t fastapi-app \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --cache-from=type=local,src=/tmp/.buildx-cache \
          --cache-to=type=local,dest=/tmp/.buildx-cache \
          .

      - name: Run Docker container
        run: docker run -d -p 8000:8000 --name fastapi-container fastapi-app

      - name: Wait for FastAPI to be ready
        run: |
          until curl -s http://localhost:8000/docs; do
            echo "Waiting for FastAPI to start..."
            sleep 5
          done

      - name: Run Acceptance Tests with Coverage
        run: |
          docker run --rm --network host -e PYTHONPATH=/app -v ${{ github.workspace }}/coverage:/app/coverage fastapi-app poetry run pytest --cov=app --cov-report=xml:/app/coverage/coverage-acceptance.xml --cov-report=html:/app/coverage/html tests/test_acceptance.py

      - name: Upload Acceptance Test Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: acceptance-test-coverage-report
          path: coverage/

      - name: Tear Down Docker Container
        run: docker stop fastapi-container && docker rm fastapi-container
