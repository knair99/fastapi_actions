name: CI Tests

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

#      - name: Cache Docker layers
#        uses: docker/build-push-action@v3
#        with:
#          tags: fastapi-app:latest
#          cache-from: type=gha
#          cache-to: type=gha,mode=max

      - name: Build Docker image
        run: docker build --cache-from=type=gha --cache-to=type=gha,mode=max -t fastapi-app .

      - name: Run Unit Tests inside Docker with coverage
        run: |
          docker run --rm \
            -e PYTHONPATH=/app \
            -v ${{ github.workspace }}/coverage:/app/coverage \
            fastapi-app poetry run pytest --cov=app --cov-report=xml:/app/coverage/coverage.xml --cov-report=html:/app/coverage/html tests/test_unit.py

      - name: Upload Coverage Report to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: /app/coverage/coverage.xml  # Path to coverage report
          flags: unittests  # Optional flag to label this report in Codecov
          name: codecov-coverage-report  # Name for the Codecov report
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}  # Set the token in GitHub Secrets

      - name: Publish Coverage Report as an Artifact
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: ./coverage/html/  # Upload the entire HTML coverage report

  acceptance-tests:
    name: Run Acceptance Tests
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:20.10.7
        options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

#      - name: Cache Docker layers
#        uses: docker/build-push-action@v3
#        with:
#          tags: fastapi-app:latest
#          cache-from: type=gha
#          cache-to: type=gha,mode=max

      - name: Build Docker image
        run: docker build --cache-from=type=gha --cache-to=type=gha,mode=max -t fastapi-app .

      - name: Run Docker container
        run: docker run -d -p 8000:8000 --name fastapi-container fastapi-app

      - name: Wait for container to be ready
        run: |
          until curl -s http://localhost:8000/docs; do
            echo "Waiting for FastAPI to start..."
            sleep 5
          done

      - name: Run Acceptance Tests with Coverage
        run: |
          docker run --rm --network host -e PYTHONPATH=/app -v ${{ github.workspace }}/coverage:/app/coverage fastapi-app poetry run pytest --cov=app --cov-report=xml:/app/coverage/coverage-acceptance.xml --cov-report=html:/app/coverage/html tests/test_acceptance.py

      - name: Upload Acceptance Test Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: acceptance-test-coverage-report
          path: coverage/

      - name: Upload Acceptance Test Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/coverage-acceptance.xml
          flags: acceptancetests
          name: acceptance-test-coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Tear Down Docker Container
        run: docker stop fastapi-container && docker rm fastapi-container

  sonarqube-analysis:
    name: Run SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [ unit-tests, acceptance-tests ]  # Make sure SonarQube waits for both test jobs to finish

    services:
      sonarqube:
        image: sonarqube:community
        ports:
          - 9000:9000
        options: >
          --health-cmd='curl http://localhost:9000/api/system/health || exit 1' 
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Wait for SonarQube to be ready
        run: |
          timeout=300  # 5 minutes timeout
          interval=10  # Check every 10 seconds
          elapsed=0
          while [ $elapsed -lt $timeout ]; do
            if curl -s http://localhost:9000/api/system/status | grep -q "UP"; then
              echo "SonarQube is ready!"
              break
            fi
            echo "Waiting for SonarQube to be ready... ($elapsed/$timeout seconds elapsed)"
            sleep $interval
            elapsed=$((elapsed + interval))
          done

          if [ $elapsed -ge $timeout ]; then
            echo "SonarQube did not become ready in time!" >&2
            exit 1
          fi

      - name: Download Unit Test Coverage Artifact
        uses: actions/download-artifact@v3
        with:
          name: unit-test-coverage-report
          path: coverage/

      - name: Download Acceptance Test Coverage Artifact
        uses: actions/download-artifact@v3
        with:
          name: acceptance-test-coverage-report
          path: coverage/

      - name: Run SonarQube Scanner
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/usr/src \
            sonarsource/sonar-scanner-cli \
            -Dsonar.projectKey=my_project_key \
            -Dsonar.sources=./app \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=admin \
            -Dsonar.password=admin \
            -Dsonar.python.coverage.reportPaths=coverage/coverage.xml,coverage/coverage-acceptance.xml \
            -Dsonar.qualitygate.wait=true